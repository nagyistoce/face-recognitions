#summary Alles was ansteht zeitlich sortiert, älteste Einträge stehen unten.

== Face recognition ==

== Collect and leran faces ==

=== Training Set ===

 * Gesichtsbilder der zu erkennenden Personen (Julia, Deniz, Pascal)

 * Aspekte
  * Licht: Links, rechts, Oben, Hinterkopf
  * Blickrichtungen einmal normal, dann Kamera um 180Grad gedreht:
   * Standorte: verschiedene Positionen im Raum
    * im stehen, im sitzen, leicht schräg in Kamer links/rechts
     * Oben, Unten, Rechts, Links
      * lächelnd, neutral, böse
 * Code/Funktion/Routine
  * 1Bild/1sec und/oder nur ein gültiges Gesicht (eyedetector + facedetector = True) aufnehmen in Training-Set
 * 
 * Abspeichern als Datei
  
== Face preprocessing ==

=== Ellypsen Maske ===


=== Smoothing (Bilateral-Filter) ===


=== Separaten Histogrammausgleich, linke + rechte Gesichtshälfte ===


=== Geometrische transformation + cropping ===

 * Stirn, Kinn, Ohren, Hintergrund croppen (wegschneiden)

 {{{
warpAffine() 
}}}
 * Affine Transformation in OpenCV
  * Rotation -> Augen horizontal ausrichten
  * Skalierung -> in jedem Bild den selben Abstand zwischen den Augen 
  * Translation -> Gesicht so Verschieben dass Augen horizontal zentriert und auf einer bestimmten Höhe (welche??) sind


=== Eye-Detection für rechtes + linkes Auge ===

 * (Frage) Welche xml benutzen wir -> ROI kleiner, groß siehe (PDF S.272 ff.)
  * Empfehlung: haarcascade_eye wenn fail -> haarcascade_eye_tree_eyeglasses (PDF S.274)

 * (Frage) geschlossene Augen + Brille auch? (ja, wenn erste Durchgang erfolglos)

 * rechtes Auge

 * linkes Auge

== Facedetection ==

 * Rechteck um gefunde/s Gesicht/er zeichnen

 * (Nice2Have) Gesichter auch am Rand des Bildes erkennen (PDF S.269)

 * (MUSS?) Nur größtes Gesicht finden 

 * (Frage) Wer weiß was rejectLevels, levelWeighs, outputRejectLevels der Funktion [http://docs.opencv.org/2.4.6/modules/objdetect/doc/cascade_classification.html?highlight=cascadeclassifier#CascadeClassifier CascadeClassifier.detectMultiScale] machen?? 

 * (Performance+) Schwellwert maximale Gesichtsgröße setzen maxSize

 * (Performance+) Schwellwert minimale Gesichtsgröße setzen minSize(80x80)

 * (Nice2Have) Performance steigern durch Flags 
{{{ 
0|cv2.cv.CV_HAAR_SCALE_IMAGE
}}} 
  * [http://books.google.de/books?id=cIM7xK5j8fYC&pg=PA34&lpg=PA34&dq=CV_HAAR_SCALE_IMAGE&source=bl&ots=c5ZPVsKdIh&sig=tjFHRk0Pj5NqyfzvA0cdxVMevxY&hl=de&sa=X&ei=LAnWUoHgHKme0QXsqYDoCg&ved=0CHgQ6AEwCA#v=onepage&q=CV_HAAR_SCALE_IMAGE&f=false bewirkt] das das Bild nicht das 'Fenster' skaliert wird
  * Fenster (minfeaturesize) anpassung

 * *OK* Alle Gesichter finden 

 * *OK* Haar-Like "Viola-Jones-Algorithm" Facedetection mit OpenCV

== Administration ==

 * *OK* Sicherstellung dass jeder eine funktionierende IDE hat

 * *OK* Repository Einweisung
 
 * *OK* Einlesen, in *Facerecognition* mit *Eigenfaces* (von Dr. Schwanecke empfohlen)

 * *OK* Anforderungs-Analyse - Teilaufgaben klären die das System leisten muss

 * *OK* Beispiel Durchgehen Facedetection


== Fragen an Dr. Schwanecke ==

 * Müssen/sollten wir Webcam Fotos direkt neu erstellen oder einladen von DB?
  * A: Bilddatenbankd können wir vorher anlegen und trainieren
  * A: Zu erkennende Person wird 'live' per Cam fotografiert und erkannt
 
 * Soll es Bilder zuordnen oder von Webcam
  * A: von der Webcam muss es funktionieren

 * Wo muss Demo laufen? (Licht)
  * A: Auf einem beliebigen Rechner

 * Ist es von Voteil ein HSRM SVN Repository zu benutzen? Zugriff vom Prof etc.?
  * A: Ist egal